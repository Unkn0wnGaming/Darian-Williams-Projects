#BlueJ class context
comment0.target=HashTable
comment0.text=\r\n\ HashTable\ class\ that\ manages\ the\ hash\ table\ and\ hash\ function\ used\ to\ store\ stock\ ticker\ names\ and\ values.\r\n\r\n\ @author\ Darian\ Williams\r\n\ @version\ 1\ (Project\ 4)\r\n
comment1.params=
comment1.target=HashTable()
comment1.text=\r\n\ Initialize\ the\ hash\ table,\ featuring\ 3\ slots\ (constructer)\r\n
comment10.params=stockName
comment10.target=int\ hashFunction(java.lang.String)
comment10.text=\r\n\ The\ hash\ function\ used\ by\ the\ program\ to\ determine\ where\ an\ entry\ should\ be\ stored\r\n\ \r\n\ @param\ stockName\ -\ The\ name\ of\ the\ stock\ so\ that\ it\ can\ be\ used\ by\ the\ hash\ function\r\n\ @return\ limitHash\ -\ The\ hash\ value\ of\ the\ entry,\ properly\ limited\ by\ the\ table\ size\r\n
comment11.params=
comment11.target=int\ elesPres()
comment11.text=\r\n\ Return\ the\ number\ of\ elements\ present\ in\ the\ table\r\n\ \r\n\ @return\ elements\ -\ The\ number\ of\ elements\ in\ all\ of\ the\ table\r\n
comment12.params=possPrime
comment12.target=boolean\ testPrime(int)
comment12.text=\r\n\ Check\ to\ see\ if\ the\ new\ possible\ table\ size\ is\ prime\r\n\ \r\n\ @param\ possPrime\ -\ The\ new,\ theoratical\ max\ table\ size\r\n\ @return\ boolean\ -\ Confirmation\ if\ the\ new\ size\ is\ prime\ or\ not\r\n
comment13.params=
comment13.target=int\ newSize()
comment13.text=\r\n\ Calculate\ the\ new\ table\ size\ for\ rehashing\r\n\ \r\n\ @return\ newSize\ -\ A\ prime\ number\ at\ least\ twice\ as\ large\ as\ the\ old\ table\ size\r\n
comment14.params=
comment14.target=void\ rehash()
comment14.text=\r\n\ Rehash\ the\ table\ when\ load\ factor\ alpah\ gets\ too\ high\ (above\ .75)\r\n
comment15.params=possNew
comment15.target=boolean\ checkDupe(java.lang.String)
comment15.text=\r\n\ Check\ to\ see\ if\ an\ insertion\ would\ lead\ to\ a\ dupe\ entry\r\n\ \r\n\ @param\ possNew\ -\ The\ name/value\ pair\ the\ user\ wants\ to\ insert\r\n\ @return\ boolean\ -\ Confirmation\ on\ if\ the\ entry\ is\ a\ dupe\ or\ not\r\n
comment16.params=updateThis\ newVal
comment16.target=void\ update(java.lang.String,\ java.lang.String)
comment16.text=\r\n\ Update\ the\ value\ for\ dupe\ name\ entries\r\n\ \r\n\ @param\ updateThis\ -\ The\ name\ of\ the\ name/value\ pair\ to\ update.\ newVal\ -\ The\ new\ value\ of\ the\ name/value\ pair\r\n
comment17.params=list\ place\ newVal
comment17.target=void\ changeVal(int,\ int,\ java.lang.String)
comment17.text=\r\n\ Display\ a\ message\ when\ a\ dupe\ entry\ is\ found\r\n\ \r\n\ @param\ list\ -\ The\ list\ location\ of\ the\ dupe.\ place\ -\ the\ index\ of\ the\ dupe.\ newVal\ -\ The\ new\ value\ of\ the\ dupe.\r\n
comment18.params=oldVal\ newVal
comment18.target=java.lang.String\ newVal(java.lang.String,\ java.lang.String)
comment18.text=\r\n\ Change\ only\ the\ value\ of\ a\ dupe\ name/value\ pair\r\n\ \r\n\ @param\ oldVal\ -\ The\ old\ value\ of\ the\ name/value\ pair.\ newVal\ -\ THe\ new\ value\ that\ will\ take\ the\ place\ of\ oldVal.\r\n\ @return\ newStock\ -\ The\ name/value\ pair\ with\ the\ updated\ value\r\n
comment2.params=
comment2.target=void\ printTable()
comment2.text=\r\n\ Display\ all\ elements\ in\ the\ hash\ table\r\n
comment3.params=stockName
comment3.target=boolean\ insert(java.lang.String)
comment3.text=\r\n\ Insert\ the\ given\ ticker\ name\ and\ value\ into\ the\ hash\ table\r\n\ If\ there\ is\ an\ attempt\ to\ enter\ a\ duplicate\ entry,\ update\ the\ value\ attached\ to\ that\ pair\ instead\r\n\ \r\n\ @param\ stockName\ -\ The\ name\ (and\ value)\ of\ the\ stock\ to\ insert\r\n\ @return\ boolean\ -\ Used\ to\ notify\ the\ user\ if\ insertion\ was\ successful\r\n
comment4.params=pairTickAndVal
comment4.target=boolean\ displayTickVal(java.lang.String)
comment4.text=\r\n\ Display\ the\ name\ (and)\ value\ of\ a\ desired\ stock\ ticker\r\n\ \r\n\ @param\ pairTickAndVal\ -\ The\ key-value\ pair\ of\ the\ ticker\ name\ and\ value\r\n\ @return\ boolean\ -\ Used\ to\ notify\ the\ user\ if\ the\ ticker\ can\ be\ display\ or\ is\ not\ found\r\n
comment5.params=tickAndVal
comment5.target=java.lang.String\ getName(java.lang.String)
comment5.text=\r\n\ Get\ the\ name\ from\ the\ name/value\ pair\r\n\ \r\n\ @param\ tickAndVal\ -\ The\ full\ name/value\ pair,\ featuring\ a\ '+'\r\n\ @return\ String\ -\ Only\ the\ name\ of\ the\ name/value\ pair\r\n
comment6.params=tickAndVal
comment6.target=java.lang.String\ getVal(java.lang.String)
comment6.text=\r\n\ Get\ the\ value\ from\ the\ name/value\ pair\r\n\ \r\n\ @param\ tickAndVal\ -\ The\ full\ name/value\ pair,\ featuring\ a\ '+'\r\n\ @return\ String\ -\ Only\ the\ value\ of\ the\ name/value\ pair\r\n
comment7.params=stockName
comment7.target=boolean\ remove(java.lang.String)
comment7.text=\r\n\ Delete\ a\ ticker\ name\ (and\ value)\ from\ the\ hash\ table\r\n\ \r\n\ @param\ stockName\ -\ The\ name\ of\ the\ stock\ to\ remove\r\n\ @return\ boolean\ -\ Used\ to\ notify\ the\ user\ if\ the\ ticker\ was\ deleted\ or\ cannot\ be\ found\r\n
comment8.params=
comment8.target=java.lang.String\ showAll()
comment8.text=\r\n\ Show\ all\ entries\ in\ the\ hash\ table\r\n\ \r\n\ @return\ fullTable\ -\ A\ printable\ string\ version\ of\ all\ the\ elements\ in\ the\ table\ \r\n
comment9.params=
comment9.target=java.lang.String\ loadFactor()
comment9.text=\r\n\ Calculate\ the\ load\ factor\ of\ the\ table\r\n\ \r\n\ @return\ loadFactor\ -\ The\ load\ factor\ of\ the\ table\ which\ can\ be\ displayed\ to\ the\ user\ or\ notify\ when\ rehashing\ must\ occur\r\n
numComments=19
