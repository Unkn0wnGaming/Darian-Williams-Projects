#BlueJ class context
comment0.target=oldCode
comment0.text=\r\n\ Solve\ a\ maze\ by\ using\ recursion.\r\n\r\n\ @author\ Darian\ Williams\r\n\ @version\ 1\ (Project\ 3)\r\n\ \r\n\ Est.\ Hours\:\ 30\r\n
comment1.params=filename
comment1.target=java.lang.String\ mazePrinter(java.lang.String)
comment1.text=\r\n\ Print\ method\ which\ reads\ the\ maze\ file,\ and\ prints\ the\ maze\ without\r\n\ the\ height\ or\ length\ at\ the\ first\ line.\r\n\r\n\ @param\ filename\ -\ Name\ of\ the\ file\ that\ features\ the\ maze\r\n\ @return\ String\ version\ of\ the\ maze\r\n
comment10.params=maze\ file
comment10.target=int\ findSpaceRow(char[][],\ java.lang.String)
comment11.params=maze\ file
comment11.target=int\ findSpaceCol(char[][],\ java.lang.String)
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=\r\n\ The\ main\ method\ which\ will\ recieve\ which\ maze\ to\ act\ on,\ where\ to\ start\ in\ the\ maze,\ and\ more.\r\n\r\n\ @param\ args\ -\ required\ for\ the\ program\r\n\ @return\ N/A\r\n
comment2.params=maze\ startRow\ startCol\ height\ length\ file\ posExits
comment2.target=void\ mazeSolverBase(char[][],\ int,\ int,\ int,\ int,\ java.lang.String,\ char[][])
comment2.text=\r\n\ Handles\ base\ cases\ where\ the\ maze\ cannot\ be\ solved\r\n\r\n\ @param\ maze\ -\ 2D\ char\ array\ of\ the\ maze.\ startRow\ -\ Row\ of\ the\ given\ starting\ position.\ startCol\ -\ Column\ of\ the\ given\ starting\ position\r\n\ height\ -\ number\ of\ row\ in\ the\ maze.\ length\ -\ number\ of\ columns\ in\ the\ maze.\ file\ -\ name\ of\ the\ file\ that\ hold\ the\ maze.\r\n\ posExits\ -\ 2D\ char\ array\ of\ where\ possible\ exits\ on\ the\ perimeter\ are.\r\n\ @return\ N/A\r\n
comment3.params=maze\ startRow\ startCol\ currRow\ currCol\ height\ length\ file\ iterations\ posExits
comment3.target=void\ mazeSolverRec(char[][],\ int,\ int,\ int,\ int,\ int,\ int,\ java.lang.String,\ int,\ char[][])
comment3.text=\r\n\ Solves\ the\ maze\ by\ using\ recurssion.\r\n\r\n\ @param\ maze\ -\ 2D\ char\ array\ of\ the\ maze.\ startRow\ -\ Row\ of\ the\ given\ starting\ position.\ startCol\ -\ Column\ of\ the\ given\ starting\ position\r\n\ currRow\ -\ the\ row\ curr\ is\ at.\ currCol\ -\ the\ column\ curr\ is\ at.\ \r\n\ height\ -\ number\ of\ row\ in\ the\ maze.\ length\ -\ number\ of\ columns\ in\ the\ maze.\ file\ -\ name\ of\ the\ file\ that\ hold\ the\ maze.\r\n\ iterations\ -\ how\ many\ times\ the\ method\ has\ ran,\ determines\ if\ a\ maze\ is\ unsolvable.\ posExits\ -\ 2D\ char\ array\ of\ where\ possible\ exits\ on\ the\ perimeter\ are.\r\n\ @return\ N/A\r\n
comment4.params=filename
comment4.target=java.lang.Integer\ maxHeight(java.lang.String)
comment4.text=\r\n\ Find\ the\ max\ height\ (top\ to\ bottom)\ of\ the\ maze\r\n\r\n\ @param\ filename\ -\ maze\ to\ find\ the\ height\ of\r\n\ @return\ Height\ of\ the\ maze\r\n
comment5.params=filename
comment5.target=java.lang.Integer\ maxLength(java.lang.String)
comment5.text=\r\n\ Find\ the\ max\ length\ (left\ to\ right)\ of\ the\ maze\r\n\r\n\ @param\ filename\ -\ maze\ to\ find\ the\ length\ of\r\n\ @return\ Length\ of\ the\ maze\r\n
comment6.params=file
comment6.target=char[][]\ mazeMaker(java.lang.String)
comment6.text=\r\n\ Turns\ the\ given\ maze\ into\ a\ 2D\ char\ array\ for\ future\ methods.\r\n\r\n\ @param\ file\ -\ the\ name\ of\ the\ file\ that\ holds\ the\ maze.\r\n\ @return\ 2D\ array\ thats\ a\ replica\ of\ the\ maze.\r\n
comment7.params=maze\ file
comment7.target=java.lang.String\ mazeMakerStr(char[][],\ java.lang.String)
comment7.text=\r\n\ toString\ method\ for\ the\ maze.\r\n\r\n\ @param\ maze\ -\ the\ maze\ being\ solved.\ file\ -\ the\ name\ of\ the\ file\ that\ holds\ the\ maze.\r\n\ @return\ A\ printable\ version\ of\ the\ maze.\r\n
comment8.params=maze\ file
comment8.target=char[][]\ possibleExits(char[][],\ java.lang.String)
comment8.text=\r\n\ Store\ the\ location\ of\ all\ spaces\ on\ the\ perimeter,\ no\ matter\ if\ they're\ accessible\ or\ not.\r\n\r\n\ @param\ maze\ -\ the\ maze\ being\ solved.\ file\ -\ the\ name\ of\ the\ file\ that\ holds\ the\ maze.\r\n\ @return\ 2D\ array\ that\ holds\ the\ location\ of\ all\ spaces\ on\ the\ perimeter.\r\n
comment9.params=maze\ posExits\ file
comment9.target=java.lang.String\ verifyExits(char[][],\ char[][],\ java.lang.String)
comment9.text=\r\n\ Verify\ if\ spaces\ on\ the\ perimeter\ were\ reachable\ by\ the\ solver.\ Also\ handles\ invalid\ starting\ positions\r\n\r\n\ @param\ maze\ -\ the\ maze\ being\ solved.\ posExits\ -\ A\ 2D\ array\ that\ stores\ the\ location\ of\ spaces\ on\ the\ perimeter.\r\n\ file\ -\ the\ name\ of\ the\ file\ that\ holds\ the\ maze.\r\n\ @return\ The\ number\ of\ exits\ found\ and\ their\ locations.\r\n
numComments=13
