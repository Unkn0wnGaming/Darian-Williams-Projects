#BlueJ class context
comment0.target=MazeSolver
comment0.text=\r\n\ Solve\ a\ maze\ by\ using\ recursion.\r\n\r\n\ @author\ Darian\ Williams\r\n\ @version\ 1\ (Project\ 3)\r\n\ \r\n\ Est.\ Hours\:\ 38\r\n
comment1.params=filename
comment1.target=java.lang.String\ mazePrinter(java.lang.String)
comment1.text=\r\n\ Print\ method\ which\ reads\ the\ maze\ file,\ and\ prints\ the\ maze\ without\r\n\ the\ height\ or\ length\ at\ the\ first\ line.\r\n\r\n\ @param\ filename\ -\ Name\ of\ the\ file\ that\ features\ the\ maze\r\n\ @return\ String\ version\ of\ the\ maze\r\n
comment2.params=maze\ startRow\ startCol\ height\ length\ trackExits
comment2.target=void\ mazeSolverBase(char[][],\ int,\ int,\ int,\ int,\ char[][])
comment2.text=\r\n\ Handles\ base\ case\ where\ the\ maze\ cannot\ be\ solved\r\n\r\n\ @param\ maze\ -\ the\ maze\ to\ solve.\ startRow\ -\ row\ to\ start\ at.\ startCol\ -\ column\ to\ start\ at.\r\n\ height\ -\ number\ of\ rows\ in\ the\ maze.\ length\ -\ number\ of\ columns\ in\ the\ maze.\ trackExits\ -\ track\ any\ exits\ the\ solver\ finds.\r\n\ @return\ N/A\r\n
comment3.params=maze\ currRow\ currCol\ height\ length\ trackExits
comment3.target=void\ mazeSolverRec(char[][],\ int,\ int,\ int,\ int,\ char[][])
comment3.text=\r\n\ Solves\ the\ maze\ by\ using\ recurssion.\r\n\r\n\ @param\ maze\ -\ the\ maze\ to\ solve.\ currRow\ -\ row\ curr\ is\ pointed\ at.\ currCol\ -\ column\ is\ pointed\ at.\r\n\ height\ -\ number\ of\ rows\ in\ the\ maze.\ length\ -\ number\ of\ columns\ in\ the\ maze.\ trackExits\ -\ track\ any\ exits\ the\ solver\ finds.\r\n\ @return\ N/A\r\n
comment4.params=exits\ height\ length
comment4.target=void\ printExits(char[][],\ int,\ int)
comment4.text=\r\n\ Display\ valid\ exits\r\n\r\n\ @param\ exits\ -\ store\ spaces\ where\ exits\ were.\ height\ -\ number\ of\ rows.\ length\ -\ number\ of\ columns.\r\n\ @return\ N/A\r\n
comment5.params=filename
comment5.target=java.lang.Integer\ maxHeight(java.lang.String)
comment5.text=\r\n\ Find\ the\ max\ height\ (top\ to\ bottom)\ of\ the\ maze\r\n\r\n\ @param\ filename\ -\ maze\ to\ find\ the\ height\ of\r\n\ @return\ Height\ of\ the\ maze\r\n
comment6.params=filename
comment6.target=java.lang.Integer\ maxLength(java.lang.String)
comment6.text=\r\n\ Find\ the\ max\ length\ (left\ to\ right)\ of\ the\ maze\r\n\r\n\ @param\ filename\ -\ maze\ to\ find\ the\ length\ of\r\n\ @return\ Length\ of\ the\ maze\r\n
comment7.params=file
comment7.target=char[][]\ mazeMaker(java.lang.String)
comment7.text=\r\n\ Turns\ the\ given\ maze\ into\ a\ 2D\ char\ array\ for\ future\ methods.\r\n\r\n\ @param\ file\ -\ the\ name\ of\ the\ file\ that\ holds\ the\ maze.\r\n\ @return\ 2D\ array\ thats\ a\ replica\ of\ the\ maze.\r\n
comment8.params=args
comment8.target=void\ main(java.lang.String[])
comment8.text=\r\n\ The\ main\ method\ which\ will\ recieve\ which\ maze\ to\ act\ on,\ where\ to\ start\ in\ the\ maze,\ and\ more.\r\n\r\n\ @param\ args\ -\ required\ for\ the\ program\r\n\ @return\ N/A\r\n
numComments=9
